## 技术架构

### 前台架构

#### 设计模式

MVC: 六个箭头， 唯独model不指向controller，保证model独立性。 缺点是controller总是很大。 最简单，开发快。
MVP: 通过中间层Presenter实现了Model和View的完全解耦。避免View和Controller分不清楚的问题。 Presenter依然会大 。主要是解偶。
MVVM: 绑定，适合包括展示和编辑的逻辑。开发较为复杂。适合逻辑复杂的场合。 view 和 model之间互相解欧

#### 复杂业务逻辑

对于复杂的业务逻辑，适合采用RAC的架构。RAC包括如下:

- 动态绑定，适合MVVM的场景。
- 链式调用，提高代码可读性。
- 响应式编程思想, 针对KVO等等，简化业务逻辑,使代码可读性好。
- 函数式编程思想, 简化业务逻辑，尤其是多个业务流程依赖，流程判断

#### 中台架构，提高开发质量，开发效率

##### APM/性能监控和优化
##### 混合/web化

###### 首屏优化

###### 小程序

##### 动态化/热修复
##### 安全

传输安全，数据安全，App metadata安全。

##### 持续集成/交付

#### 后台架构

##### 网络层

##### 数据持久化



## 需求评审

沟通关键在于会前沟通，确定各种方案的实现难度，风险点。

## 任务时长评估

任务拆解，风险预期。同时结合安卓同事的评估。业务和技术7:3的比例。

## 持续交付/代码管理

git-flow，多人协作, 分支管理。
issue-track， 问题定位。
持续集成/持续交付平台。


## 管理
